<ProjectRule name="ProtocolAdherence">
<Extends>Baseline</Extends>

<Description>
Defines how every crate, service, or agent in the workspace must align with two open-standards: **Google's Agent-to-Agent (A2A) protocol** for cross-vendor agent collaboration and **Anthropic's Model Context Protocol (MCP)** for tool / context integration with LLMs.  The rule anchors to local docs while pointing to the upstream specifications for canonical details.
</Description>

<Goals>
- Guarantee that all inter-agent messages and tool invocations interop with **A2A or MCP**, using the latest approved spec versions recorded in `/docs/protocols/`.
- Provide a repeatable checklist for adding new endpoints, tasks, resources, or tools without drifting from protocol semantics or security requirements.
- Keep local docs in sync with code, including Mermaid sequence / component diagrams that illustrate flows.
</Goals>

<Instructions>

1. <DiscoverProtocol>
   - **Determine intent**:
     - *Agent â†” Agent* coordination âžœ **A2A** (`task`, `artifact`, `agent_card`).
     - *LLM â†” Tool / Data* context exchange âžœ **MCP** (`resource`, `tool`, `prompt`).
   - Record chosen protocol & version at top of implementation ticket (e.g., `Protocol: A2A v0.4-draft`) and link to the relevant local doc.

</DiscoverProtocol>

2. <ReferenceDocs>
   - Before coding, read:
     - `docs/protocols/a2a_google.md`
     - `docs/protocols/mcp_guide.md`
     - `docs/protocols/mcp_rust.md`
   - If any doc is stale against the upstream spec, open a **Docs Update** PR _first_, summarizing the delta and updating Mermaid diagrams.

</ReferenceDocs>

3. <Implementation>
   - **A2A**:
     - Expose an `/agent` HTTP endpoint that serves the JSON **Agent Card**.
     - Implement `POST /task` accepting `Task` objects; stream updates via **SSE**.
     - Accept / emit **artifacts** per spec (use content-type negotiation).
   - **MCP**:
     - Implement **JSON-RPC 2.0** methods: `tools/*`, `prompts/*`, `resources/*`.
     - Support capability negotiation via the `initialize` handshake.
   - **Security**:
     - Use OAuth2 / service tokens as outlined in each spec.
     - Enforce explicit user consent for any tool execution or cross-agent data share.

</Implementation>

4. <Validation>
   - Run protocol test harnesses:
     - `cargo test --features "mcp_conformance"`  
     - `cargo test --features "a2a_conformance"`
   - For A2A, validate `agent_card` JSON with the upstream schema (`schemas/agent_card.json`).
   - For MCP, run `mcp-lint` against recorded JSON-RPC transcripts.

</Validation>

5. <Docs>
   - Add / update rustdoc ðŸŽ¯:
     - `//! Protocol: A2A v0.4 (see docs/protocols/a2a_google.md)`
   - Create a **Mermaid** diagram for every non-trivial flow and embed in either the crate root doc comment or `/docs/protocols/<protocol>_flows.md`.
   - Run `cargo doc --workspace` with `RUSTDOCFLAGS="-Dwarnings"` to ensure zero `missing_docs` warnings.

</Docs>

6. <Commits>
   - Prefix with `proto(a2a)` or `proto(mcp)`:
     - `proto(a2a): implement agent_card endpoint`
     - `docs(proto): add mermaid diagram for task flow`
   - Keep protocol spec bump commits isolated (e.g., `proto(a2a): bump to v0.5-draft`).

</Commits>

7. <Review & Merge>
   - PR must show:
     - Passing **conformance tests**.
     - Updated local docs & diagrams.
     - No new `missing_docs` or Clippy warnings.
   - Tag a **patch** version if change is purely internal; **minor/major** when message shapes or endpoints change.

</Review>

</Instructions>

</ProjectRule>