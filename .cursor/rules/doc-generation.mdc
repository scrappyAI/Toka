---
description: 
globs: 
alwaysApply: false
---
<ProjectRule name="DocGeneration">

<Description>
Prescribes a unified workflow for building, verifying, and publishing documentation across the
Rust workspace.  Covers `cargo doc`, README extraction, mdBook site generation, and CI / local
commandsâ€”so every contributor can produce identical docs with a single copy-paste.
</Description>

<Goals>
- One-shot command(s) that generate **API docs**, **crate READMEs**, and the **architecture book**.
- Zero `missing_docs` or rustdoc warnings (`#![deny(missing_docs)]` gate).
- Easy local preview plus repeatable CI job (GitHub Actions).
</Goals>

<Instructions>

1. <Prereqs>
   - Install tooling once per machine:  
     ```bash
     cargo install --locked cargo-readme mdbook mdbook-mermaid
     ```
   - Ensure Graphviz is present for rustdoc `dot` diagrams (`brew install graphviz` on macOS).
</Prereqs>

2. <CoreCommands>
   - **Workspace API docs** (HTML, no deps):  
     ```bash
     RUSTDOCFLAGS="-Dwarnings --cfg docsrs" \
       cargo doc --workspace --all-features --no-deps
     ```
   - **Open locally** (default browser):  
     ```bash
     cargo doc --open
     ```
   - **Crate README regeneration** (run in crate root):  
     ```bash
     cargo readme -r > README.md
     ```
   - **Architecture book** (Mermaid enabled):  
     ```bash
     cd docs/book
     mdbook build
     mdbook serve -n 127.0.0.1 -p 3000  # live-reload preview
     ```
   - **One-liner for everything** (workspace root):  
     ```bash
     ./scripts/gen-docs.sh          # calls the above in sequence
     ```
</CoreCommands>

3. <CIExample>
   - Add to `.github/workflows/docs.yml`:
     ```yaml
     name: Docs
     on:
       push: {branches: [main]}
       pull_request:
     jobs:
       build-docs:
         runs-on: ubuntu-latest
         steps:
           - uses: actions/checkout@v4
           - uses: dtolnay/rust-toolchain@stable
           - run: cargo install --locked cargo-readme mdbook mdbook-mermaid
           - run: RUSTDOCFLAGS="-Dwarnings --cfg docsrs" cargo doc --workspace --all-features --no-deps
           - run: ./scripts/gen-docs.sh
           - uses: actions/upload-artifact@v4
             with:
               name: docs
               path: |
                 target/doc
                 docs/book/book
     ```
</CIExample>

4. <QualityChecks>
   - Always finish with:  
     ```bash
     cargo test --doc --workspace
     cargo clippy --workspace --all-targets -- -D warnings
     ```
   - CI must fail on any new `missing_docs` warning.
</QualityChecks>

5. <Commits>
   - Prefix with `docs:` for doc-only changes:  
     - `docs(core): regen README.md via cargo-readme`
     - `docs(book): add mermaid sequence diagram for payment flow`
</Commits>

</Instructions>

</ProjectRule>