services:
  # Main Toka development environment
  toka-dev:
    build:
      context: ..
      dockerfile: .cursor/Dockerfile
    container_name: toka-cursor-dev
    restart: unless-stopped
    
    # Environment variables
    environment:
      - RUST_VERSION=1.86
      - CARGO_HOME=/usr/local/cargo
      - RUSTUP_HOME=/usr/local/rustup
      - PATH=/usr/local/cargo/bin:$PATH
      - RUST_BACKTRACE=1
      - CARGO_INCREMENTAL=1
      - CARGO_NET_RETRY=10
      - RUSTFLAGS=-D warnings
      - TERM=xterm-256color
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - LLM_PROVIDER=${LLM_PROVIDER:-anthropic}
      - DATABASE_URL=sqlite:///app/data/toka.db
      - TOKA_ENV=development
      - TOKA_LOG_LEVEL=debug
      - REDIS_URL=redis://redis:6379
      - PROMETHEUS_URL=http://prometheus:9090
      - GRAFANA_URL=http://grafana:3000
    
    # Port mappings
    ports:
      - "8080:8080"   # Toka API
      - "9000:9000"   # Agent Management
      - "9001:9001"   # WebSocket
      - "3000:3000"   # Frontend/Dashboard
    
    # Volume mounts
    volumes:
      - ..:/app:cached
      - cargo-cache:/usr/local/cargo/registry
      - target-cache:/app/target
      - rustup-cache:/usr/local/rustup
      - cursor-data:/app/data
      - cursor-logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    
    # Working directory
    working_dir: /app
    
    # Health check
    healthcheck:
      test: ["/app/.cursor/scripts/cursor-health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Dependencies
    depends_on:
      - redis
      - postgres
      - prometheus
    
    # Network
    networks:
      - toka-network
    
    # User for security
    user: vscode
    
    # Keep container running
    tty: true
    stdin_open: true

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: toka-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-tokadev}
    networks:
      - toka-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL for production-like testing
  postgres:
    image: postgres:15-alpine
    container_name: toka-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=toka
      - POSTGRES_USER=toka
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-tokadev}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - toka-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U toka"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: toka-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ../config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - toka-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: toka-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-tokadev}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    volumes:
      - grafana-data:/var/lib/grafana
      - ../config/grafana:/etc/grafana/provisioning:ro
    networks:
      - toka-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/login || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: toka-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - toka-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

# Named volumes for persistent data
volumes:
  cargo-cache:
    driver: local
  target-cache:
    driver: local
  rustup-cache:
    driver: local
  cursor-data:
    driver: local
  cursor-logs:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Network for service communication
networks:
  toka-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 