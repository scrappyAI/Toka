#!/bin/bash
# Enhanced pre-commit hook with AI provenance tracking and documentation validation
# This hook runs before each commit to ensure quality and track AI-generated content

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
PROVENANCE_SCRIPT="$PROJECT_ROOT/scripts/git-doc-provenance.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Check if we're in a merge
if git rev-parse --verify HEAD >/dev/null 2>&1; then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# Initialize provenance tracking if not already done
if [[ -x "$PROVENANCE_SCRIPT" ]]; then
    "$PROVENANCE_SCRIPT" init >/dev/null 2>&1 || true
fi

echo -e "${BLUE}=== Pre-commit Quality Checks ===${NC}"

# 1. Check for AI-generated content markers
echo -e "${YELLOW}Checking for AI-generated content markers...${NC}"
ai_markers_found=false
while IFS= read -r -d '' file; do
    if [[ -f "$file" ]]; then
        # Look for common AI generation markers
        if grep -q -E "(AI-Generated|Generated by|AI-assisted|Claude|GPT-|LLM)" "$file" 2>/dev/null; then
            echo -e "${YELLOW}AI-generated content detected in: $file${NC}"
            ai_markers_found=true
            
            # Automatically track AI generation if provenance script exists
            if [[ -x "$PROVENANCE_SCRIPT" ]]; then
                # Try to extract AI model from content
                ai_model=$(grep -oE "(claude-[0-9.-]+|gpt-[0-9.-]+|anthropic|openai)" "$file" 2>/dev/null | head -1 || echo "unknown")
                "$PROVENANCE_SCRIPT" track "$file" "$ai_model" "code" "medium" "true" >/dev/null 2>&1 || true
            fi
        fi
    fi
done < <(git diff --cached --name-only --diff-filter=ACM -z)

if [[ "$ai_markers_found" = true ]]; then
    echo -e "${GREEN}✓ AI-generated content tracked${NC}"
else
    echo -e "${GREEN}✓ No AI-generated content markers found${NC}"
fi

# 2. Validate documentation links (if documentation changed)
doc_files_changed=$(git diff --cached --name-only --diff-filter=ACM | grep -E "\.md$" | wc -l)
if [[ $doc_files_changed -gt 0 ]]; then
    echo -e "${YELLOW}Validating documentation links...${NC}"
    if [[ -x "$PROVENANCE_SCRIPT" ]]; then
        if "$PROVENANCE_SCRIPT" validate >/dev/null 2>&1; then
            echo -e "${GREEN}✓ All documentation links are valid${NC}"
        else
            echo -e "${RED}✗ Broken documentation links found${NC}"
            echo -e "${YELLOW}Run: $PROVENANCE_SCRIPT validate${NC}"
            echo -e "${YELLOW}Fix broken links before committing${NC}"
            exit 1
        fi
    else
        echo -e "${YELLOW}⚠ Documentation validation skipped (script not found)${NC}"
    fi
else
    echo -e "${GREEN}✓ No documentation files changed${NC}"
fi

# 3. Check for deterministic dates (prevent LLM hallucination)
echo -e "${YELLOW}Checking for date accuracy...${NC}"
date_issues_found=false
current_date=$(date -u +%Y-%m-%d)

while IFS= read -r -d '' file; do
    if [[ -f "$file" ]]; then
        # Look for date patterns that might be hallucinated
        while IFS= read -r line_num date_match; do
            if [[ -n "$date_match" ]]; then
                # Check if date is in the future (likely hallucinated)
                if [[ "$date_match" > "$current_date" ]]; then
                    echo -e "${RED}✗ Future date found in $file:$line_num: $date_match${NC}"
                    date_issues_found=true
                fi
                
                # Check for common hallucination patterns
                if [[ "$date_match" =~ ^202[0-4]-(01-28|02-29|12-32) ]]; then
                    echo -e "${RED}✗ Suspicious date pattern in $file:$line_num: $date_match${NC}"
                    date_issues_found=true
                fi
            fi
        done < <(grep -n -E "[0-9]{4}-[0-9]{2}-[0-9]{2}" "$file" 2>/dev/null | grep -v "DATE:EXEMPT" | sed 's/^\([0-9]*\):.*\([0-9]{4}-[0-9]{2}-[0-9]{2}\).*/\1 \2/' || true)
    fi
done < <(git diff --cached --name-only --diff-filter=ACM -z)

if [[ "$date_issues_found" = true ]]; then
    echo -e "${RED}✗ Date accuracy issues found${NC}"
    echo -e "${YELLOW}Use 'DATE:EXEMPT source=\"...\"' to mark intentional historical dates${NC}"
    exit 1
else
    echo -e "${GREEN}✓ No date accuracy issues found${NC}"
fi

# 4. Check for whitespace issues
echo -e "${YELLOW}Checking for whitespace issues...${NC}"
if git diff --cached --check; then
    echo -e "${GREEN}✓ No whitespace issues found${NC}"
else
    echo -e "${RED}✗ Whitespace issues found${NC}"
    echo -e "${YELLOW}Fix whitespace issues before committing${NC}"
    exit 1
fi

# 5. Check for large files
echo -e "${YELLOW}Checking for large files...${NC}"
large_files_found=false
while IFS= read -r -d '' file; do
    if [[ -f "$file" ]]; then
        file_size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "0")
        if [[ $file_size -gt 1048576 ]]; then  # 1MB
            echo -e "${YELLOW}⚠ Large file detected: $file ($(($file_size / 1024))KB)${NC}"
            large_files_found=true
        fi
    fi
done < <(git diff --cached --name-only --diff-filter=ACM -z)

if [[ "$large_files_found" = true ]]; then
    echo -e "${YELLOW}⚠ Large files detected - consider using Git LFS${NC}"
else
    echo -e "${GREEN}✓ No large files found${NC}"
fi

# 6. Run Rust-specific checks if Rust files are being committed
rust_files_changed=$(git diff --cached --name-only --diff-filter=ACM | grep -E "\.rs$" | wc -l)
if [[ $rust_files_changed -gt 0 ]]; then
    echo -e "${YELLOW}Running Rust quality checks...${NC}"
    
    # Check if cargo is available
    if command -v cargo >/dev/null 2>&1; then
        # Run cargo check
        if cargo check --workspace --all-features >/dev/null 2>&1; then
            echo -e "${GREEN}✓ Cargo check passed${NC}"
        else
            echo -e "${RED}✗ Cargo check failed${NC}"
            echo -e "${YELLOW}Fix compilation errors before committing${NC}"
            exit 1
        fi
        
        # Run clippy
        if cargo clippy --workspace --all-targets --all-features -- -D warnings >/dev/null 2>&1; then
            echo -e "${GREEN}✓ Clippy passed${NC}"
        else
            echo -e "${RED}✗ Clippy found issues${NC}"
            echo -e "${YELLOW}Fix clippy warnings before committing${NC}"
            exit 1
        fi
        
        # Run rustfmt check
        if cargo fmt --all -- --check >/dev/null 2>&1; then
            echo -e "${GREEN}✓ Rustfmt check passed${NC}"
        else
            echo -e "${RED}✗ Code formatting issues found${NC}"
            echo -e "${YELLOW}Run 'cargo fmt' to fix formatting${NC}"
            exit 1
        fi
    else
        echo -e "${YELLOW}⚠ Cargo not found - skipping Rust checks${NC}"
    fi
else
    echo -e "${GREEN}✓ No Rust files changed${NC}"
fi

# 7. Generate commit metadata for AI tracking
commit_metadata_file="$PROJECT_ROOT/.git/COMMIT_METADATA"
cat > "$commit_metadata_file" << EOF
{
    "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
    "branch": "$(git branch --show-current 2>/dev/null || echo 'unknown')",
    "files_changed": $(git diff --cached --name-only --diff-filter=ACM | wc -l),
    "ai_content_detected": $ai_markers_found,
    "doc_files_changed": $doc_files_changed,
    "rust_files_changed": $rust_files_changed,
    "checks_passed": true
}
EOF

echo -e "${GREEN}=== All pre-commit checks passed! ===${NC}"
echo -e "${BLUE}Commit metadata saved to: $commit_metadata_file${NC}"

exit 0 