version: '3.8'

services:
  toka-agents:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: toka-background-agents
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "9000:9000"
      - "3000:3000"
    environment:
      # Database configuration
      - DATABASE_URL=sqlite:///app/data/agents.db
      - STORAGE_TYPE=sqlite
      
      # LLM Configuration (set your API keys)
      - LLM_PROVIDER=anthropic
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - LLM_RATE_LIMIT=50
      - LLM_TIMEOUT=30
      
      # Agent orchestration settings
      - AGENT_POOL_SIZE=10
      - MAX_CONCURRENT_AGENTS=8
      - AGENT_SPAWN_TIMEOUT=30
      - WORKSTREAM_TIMEOUT=3600
      
      # Performance optimization
      - RUST_LOG=info
      - TOKIO_WORKER_THREADS=4
      - CONTEXT_CACHE_SIZE=2048
      - CONTEXT_CACHE_TTL=7200
      
      # Security settings
      - RUST_SECURE_ZERO_MEMORY=1
      - AGENT_SANDBOX_ENABLED=true
      - CAPABILITY_VALIDATION=strict
      
      # Monitoring
      - METRICS_ENABLED=true
      - TRACING_ENABLED=true
      - LOG_LEVEL=info
    
    volumes:
      - agent_data:/app/data
      - agent_logs:/app/logs
      - agent_config:/app/config
      - ./config/agents.toml:/app/config/agents.toml:ro
    
    depends_on:
      - prometheus
      - grafana
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    security_opt:
      - no-new-privileges:true
    
    networks:
      - toka-network

  prometheus:
    image: prom/prometheus:latest
    container_name: toka-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - toka-network

  grafana:
    image: grafana/grafana:latest
    container_name: toka-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - toka-network

  redis:
    image: redis:7-alpine
    container_name: toka-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-tokaagents}
    volumes:
      - redis_data:/data
    networks:
      - toka-network

volumes:
  agent_data:
    driver: local
  agent_logs:
    driver: local
  agent_config:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local

networks:
  toka-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 